<h1>About</h1>
<p>網頁：<a href="https://zhe41223118.github.io/wcm2024/">https://zhe41223118.github.io/wcm2024/</a></p>
<p>網誌<span>：<a href="https://zhe41223118.github.io/wcm2024/blog/index.html">https://zhe41223118.github.io/wcm2024/blog</a></span></p>
<p>簡報<span>：</span><a href="https://zhe41223118.github.io/wcm2024/reveal/index.html">https://zhe41223118.github.io/wcm2024/reveal</a></p>
<p>倉儲<span>：</span><a href="https://github.com/zhe41223118/wcm2024">https://github.com/zhe41223118/wcm2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ffff00;"><em><strong>網站目錄功能</strong></em></span></p>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<h2>notebook</h2>
<p>在replit教學內容裡所整理的重點：</p>
<p>ps：這裡replit操作流程已經做過了這裡不再贅述過多，會以簡化的方式來述說，想要看到詳細的操作步驟，請到<a href="https://fgh41223111.github.io/cp2023_ag6/content/replit.html">這個網頁</a>。</p>
<p>1.使用<a href="https://github.com/mdecycu/cmsimde_site">這個倉儲</a>來創建自己的倉儲。</p>
<p></p>
<p></p>
<p></p>
<h1>w2</h1>
<p>在這週上課內容為整理修課導師網站內容題目，和上課新教的新的編輯網站方法。共三項。</p>
<p>1.<a href="https://zhe41223118.github.io/wcm2024/content/Disqus.html">Disqus</a> (<strong><span style="background-color: #99cc00;">未完成</span></strong>，會在之後慢慢研究並完成)</p>
<p>2.<a href="https://zhe41223118.github.io/wcm2024/content/ckmsc39th.html">ckmsc39th</a></p>
<p>3.<a href="https://zhe41223118.github.io/wcm2024/content/Codespaces.html">Codespaces</a></p>
<p></p>
<h2>Disqus</h2>
<p>以導師網站裡這個頁面給的<a href="https://mde.tw/wcm2024/content/Disqus.html">範例</a>。</p>
<p>想試試以這個<a href="https://help.disqus.com/en/articles/1717112-universal-embed-code">參考影片</a>為基底，製作出一個屬於自網站的Q&amp;A留言系統。</p>
<p>最終希望能完成向導師<a href="https://mde.tw/wcm2024/content/Q&amp;A.html">這個</a>頁面一樣的系統。</p>
<p></p>
<p></p>
<h2>ckmsc39th</h2>
<p>在看了<a href="https://github.com/ckmsc39th/ckmsc39th.github.io/graphs/contributors">這個倉儲</a>的貢獻者名單，除了可以看到<span>各用戶的提交次數與每次提交內容外。</span></p>
<p><span>個人在觀看分析後覺得，可以從<a href="https://github.com/ckmsc39th/ckmsc39th.github.io/graphs/contributors">這個</a>網站頁面還能得知：</span></p>
<p><span>(!)各成員提交的時間點及提交統計圖。</span></p>
<p><span>(2)各成員在當月當日，每天上傳修改資料曲線圖。</span></p>
<p><span>(3)得知從2/12到6/13這段期間是各成員有push的時間段。</span></p>
<p><span>(4)同(3)也得知每位成員在各時間段上傳次數多寡。</span></p>
<p><span>(5)也能統計全員的上傳次數並統計排名。</span></p>
<h2>Codespaces</h2>
<p>在繼使用replit 近端 遠端，編輯維護網站後，為新的維護能維護網站的方法。</p>
<p>優缺點總結幾點：</p>
<p>1.可以跳過近端反鎖部驟，直接開啟動態網站編輯。</p>
<p>2.幾乎與replit的操作系統一樣。(和其最近更新的動態網站連結亂碼)</p>
<p>3.受限於這個只是給你試用的，所以有<span style="background-color: #ffff00;">每個月的使用時數上限</span>。</p>
<p>以下連結為使用<span style="background-color: #ffff00;">Codespaces</span>編輯維護晚站後的靜態連結：</p>
<p><a href="https://zhe41223118.github.io/wcm2024">https://zhe41223118.github.io/wcm2024</a></p>
<p></p>
<p><span></span></p>
<h1>w3</h1>
<p>本週整理重點有三。</p>
<p>1.wink建立操作影片。</p>
<p>2.介紹了git的常用指令。(也新增了一些自己收錄的一些指令)</p>
<p>3.利用指令分組網站成員倉儲分組為子模組。</p>
<h2>Wink</h2>
<p>可以至官方網站<a href="https://www.debugmode.com/wink.html">下載</a>需要的版本。</p>
<p>或直接下載這個<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EdhJ6v0ihThGu3Mwl2doZssBdb258_r7Bv_-ie0CCYEu8g?e=C5JZc5">安裝檔</a>。</p>
<h2>git order</h2>
<p><span style="background-color: #ffff00;">git add .</span> (新增)</p>
<p><span style="background-color: #ffff00;">git commit -m "內容"</span>  (提交及名稱)</p>
<p><span style="background-color: #ffff00;">git </span><span><span style="background-color: #ffff00;">push</span> (推送)</span></p>
<p><span><span style="background-color: #ffff00;">git version</span> (查詢目前所使用的 git 版本)</span></p>
<p><span><span style="background-color: #ffff00;">git status</span> (一般是用來檢查目前近端改版情況)</span></p>
<p>若在遠端倉儲已經改版了，就必須先<span><span style="background-color: #ffff00;">git pull</span>，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。</span></p>
<p><span>git pull=git fetch + git merge</span></p>
<p><span><a href="https://nulab.com/zh-tw/learn/software-development/git-tutorial/git-collaboration/remote-branches/fetching-remote-branches/">git fetch</a> (將遠端主機的最新內容拉到本地)，<a href="https://johnnywang1994.github.io/book/articles/git/merge.html">git merge</a> (用於從指定的commit合併到當前分支)</span></p>
<p><span style="background-color: #ffff00;">git submodule add 自己倉儲網址.git+學號</span><span> (新增分組倉儲的子模組)</span></p>
<p>如果只要取下倉儲主要內容，可以使用<span>git clone (取一個git倉儲)克隆一份git倉儲，可能該子模組還有其他子模組，就必須加上<a href="https://stackoverflow.com/questions/3796927/how-do-i-git-clone-a-repo-including-its-submodules">--recurse-submodules</a></span></p>
<p><span><span style="background-color: #ffff00;">git clone --recurse-submodules</span> (.git 指定目錄與否)</span></p>
<p>------------------------------------------------------------------------------------------------</p>
<p>以下為自己收錄使用指令(可能有非git指令)</p>
<p><span style="background-color: #ccffff;">git submodule update --init (抓下子模組)</span></p>
<p><span style="background-color: #ccffff;">git log (檢視 Git 紀錄 Q鍵離開)</span></p>
<p><span style="background-color: #ccffff;">ls -l (瀏覽)</span></p>
<p><span style="background-color: #ccffff;">pwd (列出現在工作目錄)</span></p>
<p><span style="background-color: #ccffff;">acp ("輸入" 直接上傳)</span></p>
<p><span style="background-color: #ccffff;">dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫)</span></p>
<p><span style="background-color: #ccffff;">dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄)</span></p>
<p></p>
<p></p>
<h2>submodule</h2>
<p>主要還是參照導師的<a href="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/stream.aspx?id=%2Fpersonal%2Fyen%5Fnfu%5Fedu%5Ftw%2FDocuments%2F2024%2Fwcm2024%2Fvideo%2Fwcm2024%5F1a%5Fw3%5F2%5F%E5%B0%87%E7%B5%84%E5%93%A1%E7%9A%84%E5%80%8B%E4%BA%BA%E5%80%89%E5%84%B2%E7%B4%8D%E7%82%BA%E5%88%86%E7%B5%84%E5%80%89%E5%84%B2%E7%9A%84%E5%AD%90%E6%A8%A1%E7%B5%84%2Emp4&amp;nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;ga=1&amp;referrer=StreamWebApp%2EWeb&amp;referrerScenario=AddressBarCopied%2Eview">這個影片</a>和<a href="https://blog.kennycoder.io/2020/06/14/Git-submodule-%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/">網頁</a>來完成的。</p>
<p>整理了導師在影片中應用到的指令：</p>
<p><span style="background-color: #ffff00;">git status</span></p>
<p><span style="background-color: #ffff00;">ls -l</span></p>
<p><span style="background-color: #ffff00;">clear</span></p>
<p><span style="background-color: #ffff00;">git submodule add 自己倉儲網址.git空格+學號</span></p>
<p><span style="background-color: #ffff00;">git add .</span></p>
<p><span style="background-color: #ffff00;">git commit -m "add 學號 submodule"</span></p>
<p><span style="background-color: #ffff00;">git push</span></p>
<p>以上指令。</p>
<p>操作部分是在github的Codespaces上執行，目的是在分組倉儲建立個人子模組。</p>
<h1>w4</h1>
<p>1.<a href="https://8000-zhe41223118-wcm2024-g09005qk317.ws-us110.gitpod.io/content/index.html">https://8000-zhe41223118-wcm2024-g09005qk317.ws-us110.gitpod.io/content/index.html</a></p>
<p>使用<a href="https://gitpod.io">gitpod</a>來維護倉儲，並獲得權限(<span style="background-color: #ffff00;">.ssh-keygen</span>)。</p>
<p><span style="background-color: #ccffcc;">備註：恩為gitpod它只有每個月50小時的限量，所以使用完需回到gitpod網頁將執行中的倉儲<strong>stop</strong>，</span></p>
<p><span style="background-color: #ccffcc;">在使用git</span><span style="background-color: #ccffcc;">pod上傳時會需要先授權與github的合併存取權，否則會無法上傳。</span></p>
<p><span style="background-color: #ccffcc;"></span>2-1.Replit靜態網站檢視，需下載<a href="/downloads/main2.txt">main2.txt</a>和<a href="/downloads/static.txt">static.txt</a>取得裡面的<span><span style="background-color: #ffff00;">main2.py</span>和<span style="background-color: #ffff00;">static.py</span>，之後在 <span style="background-color: #ffff00;"><strong>Shell</strong></span> 執行 <span style="background-color: #ffff00;">python3 main2.py</span> 就可以執行倉儲內的靜態網站檢視，要取消執行只要在Shell頁面按下<strong><span style="background-color: #ffff00;">Ctrl+C</span></strong>就可以了。</span></p>
<p><span>2-2.Replit分組網站建立權限，由於Replit只允許一個倉儲帳號對應，所以分組網站的<span style="background-color: #ffff00;">每個人</span>都需要自行在 <span style="background-color: #ffff00;">/home/runner/.ssh</span> 目錄下建立 <span style="background-color: #ffff00;">id_rsa</span> 與 <span style="background-color: #ffff00;">config</span></span></p>
<p><span style="background-color: #ccffcc;">備註：建議還是使用Gitpod來進行.ssh-keygen，因為replit時常改版 也會以授權等方式來拖延時時間來刪除你的.ssh。</span></p>
<p>3.使用replit Codespaces Gitpod三種網頁編輯執行動態和靜態網站和維護。</p>
<p>4.期中與期末時需要利用<strong><span>LaTeX</span></strong>建立各組的報告，所以需先下載<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EUlPn3lAo5ZPn9syR_xAbHsBhiSa_EULJtAInuSbwl4HhQ?e=EvGdqh">miktex-portable.7z</a></p>
<p>5.需要利用分組倉儲整理：</p>
<p><a href="https://github.com/git-guides">https://github.com/git-guides</a><span></span></p>
<p><a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a></p>
<p><a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/41223118_nfu_edu_tw/EVwYFasax3lKjPdSV-s74eoBhxLEUSshrejySu9naK79FQ?e=FNt5SB">A Tutorial for GitHub.pdf</a></p>
<p><a href="https://docs.github.com/en/get-started/start-your-journey/git-and-github-learning-resources">github學習資源</a></p>
<p>以上等資料統整至<a href="https://mdewcm2024.github.io/1a-ag4/content/Git%20Tutorial.html">分組倉儲網站</a>。</p>
<h1>w5</h1>
<p>事前預習了解這週可能會講到內容<span style="background-color: #ffff00;"><strong>iframe</strong></span>及<a href="https://www.tsg.com.tw/blog-detail4-324-0-iframe.htm">相關網站</a>。</p>
<p>---------------------------------------------------------------------------------------</p>
<p>1.講解Replit分組平台倉儲設定。(詳細觀看<a href="https://www.youtube.com/watch?v=syTeJ0kJAow">此TY</a>)</p>
<p>主要內容有用<span style="background-color: #ffff00;">.ssh-keygen</span>創建自己的<span style="background-color: #ffff00;">config</span>和<span><span style="background-color: #ffff00;">id_rsa</span>，刪除重新綁定在replit的倉儲帳號以利重新獲得自己的權限。</span></p>
<p><span></span></p>
<p><span>2.使用<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/ETIaH2KB2dxKjbJpkxS6kO4B4eo0QaeH3iW0rxUfqBMMng?e=cINExf">可攜檔</a>裡的<span style="background-color: #ffff00;"><strong>Putty-solvespace.exe</strong>(<a href="https://www.adobe.com/hk_zh/creativecloud/file-types/image/vector/stl-file.html#%E4%BB%80%E9%BA%BC%E6%98%AF-stl-%E6%AA%94%E6%A1%88">STL</a>)</span>，零件檢視方法。(<a href="https://www.youtube.com/watch?v=ep6lDKCU_wo">詳細影片</a>)</span></p>
<p><span> </span></p>
<p><span>3.如何使用可攜程式近端，維護更新自己及分組倉儲。(網站步驟可以看<a href="https://zhe41223118.github.io/cp2023/content/w13.html">這個網站</a>or<a href="https://www.youtube.com/watch?v=ep6lDKCU_wo">YT</a>)</span></p>
<h1>w6</h1>
<p>課程實作操作：</p>
<p>1.<span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">根據自己專業，說明<span style="background-color: #ffff00;"><strong>git</strong></span>的使用和與<span style="background-color: #ffff00;"><strong>ChatGPT</strong></span>的對話，將內容整理到個人網誌，內容需含<span style="background-color: #ffff00;">git發展歷史</span>，<span style="background-color: #ffff00;">創作人的履歷</span>，以及一般相同專業人士<span style="background-color: #ffff00;">如何利用git解決內容管理問題</span>？</span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">2.如果想在Windows實際使用<span style="background-color: #ffff00;"><strong>demo git client</strong></span>與<span style="background-color: #ffff00;"><strong>git server</strong></span>，該如何進行？</span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr"></span></span></p>
<p><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr" style="background-color: #ccffcc;">了解git在不同專業領域的應用</span></p>
<p><span style="background-color: #99ccff;"><strong><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">了解從git init到git push的流程</span></strong></span></p>
<p> </p>
<p>測試YT超連結上傳(非正式)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/o20gz0bbeUQ?si=HM-E63TuilfCky2R" title="YouTube video player" width="560"></iframe></p>
<h2>git introduce</h2>
<p>就自己與git的理解，能想到的直覺git就是一個系統的控制代碼庫，內容包含的有創建 上傳 修改 檢視 拉取，能與多位參與者一起設計一個產品，並設有git的分支可以使各位設計者們在不同的分支裡設計 儲存，最後提交合併統整成一個完整的成品。</p>
<p>簡單點就是比方說一個產品有分上下半，我正在做上半部另一個人正在做下半部，最後合併，也可以兩人同時整理上下兩部分，就是最後合併時會有因為彼此設計內容不同而有的衝突問題，需要解決的合併問題。</p>
<p>以上自己所理解關於git的使用。</p>
<p>而經由與chatGTP的尋問和思索得出：</p>
<p><span>Git是一個分散式版本控制系統，旨在快速且有效率地處理從小到大的專案，</span></p>
<p><span>幫助團隊協同開發軟體，追蹤程式的變更，並管理不同版本的程式歷程。</span></p>
<p><span>基本的使用程式有：</span></p>
<p><span>git <span class="hljs-keyword">init (建立一個新的Git儲存庫)/mkdir</span></span></p>
<p><span><span class="hljs-keyword"><span style="background-color: #ffff00;">git add .</span> (將檔案加入至暫存區)</span></span></p>
<p><span><span class="hljs-keyword"><span style="background-color: #ffff00;">git commit <span class="hljs-operator">-</span>m "內容"</span> (提交修改)</span></span></p>
<p><span><span class="hljs-keyword"><span style="background-color: #ffff00;">git push</span> (推送修改內容至遠端儲存庫)/<span style="background-color: #ffff00;">git pull</span>(拉取現在遠端資料庫的最新資料)</span></span></p>
<p><span><span class="hljs-keyword"><span style="background-color: #ffff00;">git status</span> (查看存儲庫狀態)</span></span></p>
<p><span><span class="hljs-keyword">git <span class="hljs-built_in">log (查看提交歷史)</span></span></span></p>
<p><span><span class="hljs-keyword">git <span class="hljs-built_in">clone (克隆現在存儲庫)</span></span></span></p>
<p>-------------------------------------------------------------------------------------------------</p>
<p>Git是由<a href="https://zh.wikipedia.org/zh-tw/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9">Linus Torvalds</a>於 2005 年開始開發的，當時創作者因個人興趣而創作了<a href="https://zh.wikipedia.org/zh-tw/Linux">Linux作業系統</a>，但當該系統的版本控制<a href="https://zh.wikipedia.org/zh-tw/BitKeeper">BitKeeper</a>被停止免費使用時，創作者開始為 Linux的核心創建自己的版本控制系統。</p>
<p>於2005年4月以1.0版本的形式公開發布，最初的版本是基於快照的版本控制系統，本意是提供高速性能和完整的歷史記錄。</p>
<p>隨著時間的推移，Git開始在社會得到了廣泛的應用許多，多個軟體製作都開始採用Git作為主要的版本控制系統。</p>
<p>於2008年GitHub平台的建立，GitHub 提供了強大的協作功能和社交化的開發環境，吸引了許多創作者和專案組的使用，使Git知名度進一步的提升。</p>
<p>Git一直在不斷發展和改進，每個版本的更新都包括性能優化、新功能和錯誤修復，使 Git 變得更加穩健和強大。</p>
<p>-------------------------------------------------------------------------------------------------- </p>
<p>總的來說，Git 的發展歷史可以追溯到其開發者<span style="background-color: #ffff00;">Linus Torvalds</span>對當時版本控制系統的不滿。</p>
<p>而關於創作者，<span>他最初是為了個人興趣而開發Linux，並將其發布為開源軟體，這是一個極其簡單的作業系統核心，隨著時間的推移，Linux開源項目發展迅速，逐漸成為一個強大的作業系統，廣泛用於服務器、嵌入式設備和超級計算機等領域。</span></p>
<p><span>Linux的成功之後，創作者開始致力於其他開源項目，包括 Git分散式版本控制系統，而Git 最初是為了管理 Linux內核開發過程中的版本控制而創建的。</span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">在見證了BitKeeper版本控制系統被禁止免費使用後，促使他開發了一個新的版本控制系統，也就是 Git。</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">簡單來說<span style="background-color: #ffff00;">Linus Torvalds</span>是開源社會(<a href="https://en.wikipedia.org/wiki/Open-source-software_movement">Open-source-software movement</a>)的重要領頭人之一。</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">--------------------------------------------------------------------------------------------------</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">Git提供了強大的版本控制和內容管理功能，有助於解決許多與程式、文件和項目管理相關的問題。</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">1.Git可以<span style="background-color: #ffff00;">追蹤文件的歷史</span>變更，並允許用戶輕鬆地回溯到先前的版本，對於開發者來說他們可以隨<span style="background-color: #ffff00;">時查看、比較和恢復文件的不同版本</span>，從而更好地管理。</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">2.Git<span style="background-color: #ffff00;">允許用戶創建分支</span>，這是代碼庫中獨立的開發線。這使得開發人員可以同時進行多個功能的開發，而不會影響主要代碼庫的穩定性。分支還可以用於實現不同的功能和版本之間的隔離，以及進行測試和修復錯誤。</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">3.Git是一個分散式版本控制系統，<span style="background-color: #ffff00;">允許多個開發人員同時在同一個程式庫上工作</span>，開發人員可以通過提交和合併程式來協同製作。</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">4.Git<span style="background-color: #ffff00;">支持遠端存儲庫</span>，可以將程式庫備份到遠端伺服器(如：GitHub)，可以跨不同位置和團隊共享和訪問程式，並提高程式的可用性和可靠性。</span></span></span></p>
<p><span><span class="hljs-keyword"><span class="hljs-built_in">5. Git可以與持續集成和持續部署（<a href="https://www.wingwill.com.tw/zh-tw/%E9%83%A8%E8%90%BD%E6%A0%BC/%E9%9B%B2%E5%9C%B0%E6%B7%B7%E5%90%88%E6%87%89%E7%94%A8/cicd%E5%B7%A5%E5%85%B7/">CI/CD</a>）工具集成，使得開發團隊可以自動化測試、構建和部署應用程序，從而加快開發週期並提高代碼品質。</span></span></span></p>
<h2>application</h2>
<p>在<span>chatGTP理解裡</span>demo git client指的是<span style="background-color: #ffff00;">用於演示或展示 Git功能和操作的 Git客戶端<span style="background-color: #ffffff;">，<span>供簡單易用的用戶界面，可以快速了解 Git 的基本操作和流程，demo git client會模擬 git的常見功能，通常是教學或演示目的而設計的，以幫助用戶更好地理解和應用 git 版本控制系統。</span></span></span></p>
<p>詢問<span>chatGTP得到這些結論後，自己個人理解為就是對git的基礎灌輸，讓你理解git的運作 原理 如何用及應用，對此我觀看了：<a href="https://www.youtube.com/watch?v=USjZcfj8yxE">git基礎影片</a>，<a href="https://ithelp.ithome.com.tw/articles/10326937">觀看這個網站</a>。</span></p>
<p><span>--------------------------------------------------------------------------------------------------------------</span></p>
<p>在<span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">Windows上使用<span style="background-color: #ffff00;">git server</span>。(我首先參考了<a href="https://ithelp.ithome.com.tw/articles/10250078?sc=rss.iron">這個網站</a>內容大致理解了如何架設)</span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">詢問了chatGTP，大致與事前觀看的網站資訊差不多，但GTP特別說明，一定要安裝下載最新版本的Git for Windows 。</span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">簡單理解就是需先準備好一個適合的環境，然後使用git創建一個資料庫(git init) 設置SSH訪問認證服務，之後只要在新建好的資料夾執行</span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">cd ~ </span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">mkdir git</span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr"> cd git </span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">mkdir my-git-server </span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">cd my-git-server </span></span></p>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">git init --bare</span></span></p>
<h2>init to push</h2>
<p>首先要先啟動好個人的可攜式近端程式：</p>
<p><em><strong>1.</strong></em>在Y<span>:\tmp分別建立gitproject\repository和gitserver\repository共四個目錄。(mkdir)</span></p>
<p><span><em><strong>2.</strong></em>在gitproject\repository和gitserver\repository裡分別再新增名稱為repo1的目錄。</span></p>
<p><span><em><strong>3.</strong></em>繼2.在Y:\tmp\gitproject\repo1裡新增新檔案<span style="background-color: #ffff00;">README.md</span>，</span></p>
<p><span>內容有：</span></p>
<p>echo "Hello, World!" &gt; README.md</p>
<p>git add README.md</p>
<p>git commit -m "Initial commit"</p>
<p>git remote add origin y:\tmp\gitserver\repository\repo1</p>
<p>git push -u origin main</p>
<p><em><strong>4.</strong></em><span>在Y:\tmp\gitproject&gt;<strong><span style="background-color: #ffff00;">git config --global init.defaultBranch main</span></strong>，</span></p>
<p><span>設定git init採用main作為內定主分支，</span></p>
<p><span>之後使用<strong><span style="background-color: #ffff00;">git init</span></strong>，創建<span style="background-color: #ffff00;">.git</span>。(如圖</span><span>)</span></p>
<p><span><img alt="" height="129" src="/images/003.png" width="722"/></span></p>
<p><span><em><strong>5.</strong></em>完成以上步驟後，將Y:\tmp\gitproject\repo1中的倉儲內容送到Y:\tmp\gitserver\repository\repo1目錄中，在C:\tmp\repository&gt;執行 git clone Y:\tmp\gitserver\repository\repo1。</span></p>
<p><span style="background-color: #ccffcc;">(因為沒有特別說明倉儲clone後的目錄名稱，因此git會將Y:\tmp\gitserver\repository\repo1內容複製一份放入 C:\tmp\repository\repo1目錄裡)</span></p>
<p><span><em><strong>6.</strong></em>Y:\tmp\gitserver\repository\repo1裡的資料現在已分別存入Y:\tmp\gitproject\repo1與 C:\tmp\repository\repo1裡，<span style="background-color: #ffff00;">可以分別在這兩個倉儲中進行改版 提交</span>，再設法將改版內容<span style="background-color: #ffff00;">push</span>到 Y:\tmp\gitserver\repository\repo1中。</span></p>
<p><span>(想讓使用者<span style="background-color: #ffff00;">跨網路存取Windows</span>操作系統上的倉儲，請參考<a href="https://stackoverflow.com/questions/377213/git-serve-i-would-like-it-that-simple">這裡</a>)</span></p>
<p><span></span></p>
<h1>w8</h1>
<p>1.介紹教育本質</p>
<p><a href="https://www.youtube.com/watch?v=zmKrkX8Z8UQ&amp;t=7s">youtube</a></p>
<p>2.如何將影片嵌入進自己網站</p>
<p>將自己想上傳的影片內容先放到yt上，之後至自己的yt影片下</p>
<p>點擊<span style="background-color: #ffff00;">分享</span></p>
<p>選擇第一個<span style="background-color: #ffff00;">嵌入</span></p>
<p>將顯示在右側的<span style="background-color: #ffff00;">超連結程式</span>碼複製</p>
<p>來到動態編輯網站</p>
<p>點擊Source code<span style="background-color: #ccffcc;">(最下排笑臉右邊)</span></p>
<p>將複製的超連結內容貼上</p>
<p>完成。</p>
<p><span style="background-color: #ccffcc;">(註：如需有特別需要可以修改超連結內容來完成所需</span></p>
<p><span style="background-color: #ccffcc;">例：width="560" height="315" 為影片的長寬設定)</span></p>
<h1>w9</h1>
<p>期中課程整理：<span>網際內容管理(</span>Web-based Content Management)</p>
<p>目的：利用<span>網頁來管理與個人或專業領域應用相關的內容</span></p>
<p><span>網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中，只要有能夠執行 Python 的雲端或近端環境，開啟網頁編輯程式進行改版，上傳資料可在 Github 倉儲中透過 Pages 的全球資訊伺服器呈現網站內容。</span></p>
<p><span>本課管理系統採用 Python Flask 編寫，超文件的以 H 標註進行分頁外，還有elican 與 Reveal.js 等兩個延伸套件</span></p>
<p><span><span style="background-color: #ffff00;">Pelican</span> 可用來建立<span style="background-color: #ffff00;">網誌</span>， Reveal.js 則可用來建立網頁上的簡報資料。</span></p>
<h1>w10</h1>
<p>以replit來維護新的分組倉儲，需要應對問題為<span style="background-color: #ffff00;">r</span><span><span style="background-color: #ffff00;">eplit的.shh</span>協定無法供免費使用者使用，已經透過github系統設定，現在可以直接在replit進行分組維護，</span></p>
<p><span>replit目前只剩下對於使用者的<a href="https://replit.com/usage">總資料儲存量</a>(10G)限制，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。</span></p>
<p><span>新的分組專案網站：<a href="https://github.com/mdewcm2024/1astud-site">https://github.com/mdewcm2024/1astud-site</a></span></p>
<p><span style="background-color: #ccffcc;">(需在teams留言字串進行加入)</span></p>
<h1>w11</h1>
<p>在上週w10中已經讓學員加入了新的評分倉儲網站，以replit進行維護。</p>
<p>課程中提到了主要重點：</p>
<p>所有學員需將分組的小組組別名稱(g4)新增至評分網站中的，為置於專案目錄下，之後將每位學員的關於本課程內容心得，新增至各組別下的目錄。</p>
<p>這個過程中的困難點就是當多人在同時上傳(push)時，我們要如何應對。</p>
<p>慢慢等人上傳後自己再上傳顯然是不合效率，所以需以課程所學來應對衝突問題。</p>
<p>這裡就是需要利用<span style="background-color: #ffff00;">分支</span>處理衝突問題，雖然在上傳時如果當下自己的版本不是最新的，一樣需要將最新的版本git pull下來，然後進入動態網站進行衝突/合併，解決完後才能夠git push上去。</p>
<p>分支：就是在當下的版本的另一條屬於自己的版本，比如說是原本一條的河流，突然變成兩條(甚至以上)，他們在本質上是屬於同一支源流，但每個分支出來會呈現的形式都是不同，最終都會匯聚至大海，而大海就是我們衝突裡的主流，每個人在自己的分支裡做自己想做的，最後要統整合併為一個主流，將每次上傳時都可能遇到的處理衝突問題次數降低。</p>
<h2>branch</h2>
<p>將分支會用到的所有程式統整。</p>
<p><span style="background-color: #ccffcc;">(這裡只放了有關分支的程式碼，如需更詳細了解可參考<a href="https://www.youtube.com/watch?v=N4QPHMznMGc&amp;t=623s" style="background-color: #ccffcc;">影片一</a> <a href="https://www.youtube.com/watch?v=IeCdIhAebec" style="background-color: #ccffcc;">影片二</a>，這兩支導師課堂影片)</span></p>
<p>git branch 檢視現有分支</p>
<p><br/>git checkout 切換到指定分支</p>
<p><br/>git merge main 將分支內容合併給main</p>
<p><br/>git push origin ？？ 遠端上傳並建立分支</p>
<p><br/>git merge ？？ 將分支合併至main<span style="background-color: #ccffcc;">(注意檢查自己在哪個branch)</span></p>
<p>------------------------------------------------------------------------------------------------------</p>
<p>執行上述程式後理論上只要<span style="background-color: #ffff00;">git push</span>就能成功上傳了，如果這時有人在你做的過程中新增了新東西，可能就要先<span style="background-color: #ffff00;">git pull</span>將版本更新至其改的最新版後，進行衝突處理。</p>
<p>可能會出現，如圖下：</p>
<p><img alt="" height="162" src="/images/螢幕擷取畫面 (62).png" width="571"/></p>
<p>選擇圈中第一行字串輸入後<span style="background-color: #ffff00;">git pull</span>即可。</p>
<p><span style="background-color: #ccffcc;">額外補充：ps -a 列出所有執行中的靜動態</span></p>
<p></p>
<h1>w12</h1>
<p><em><strong>1.</strong></em>開始複習加深前幾周所教學內容</p>
<p><em><strong>2.</strong></em>評分網站在<span style="background-color: #ffff99;">git pull</span>處理要點</p>
<p>如果自己不是最新版本，在pull後內容會顯示新增 修改的內容</p>
<p>WSGIserver(<span>Web Server Gateway Interface</span>)：<span>具有<span style="background-color: #ffff00;">高效</span>、易於使用和可擴展性等特點，是 Python 中用於定義 Web 應用程序與 Web 服務器之間通信的標準界面。(<a href="https://pypi.org/project/WSGIserver/">參考</a>)</span></p>
<p><span><em><strong>3.</strong></em>導師心得評語，修改評分網站中個人心得</span></p>
<p><span><em><strong>4.</strong></em>提到學校網站利用<a href="https://www.php.net/">php</a>(<a href="https://zh.wikipedia.org/zh-tw/PHP"><b>P</b>HP: <b>H</b>ypertext <b>P</b>reprocessor</a>)所編寫，提到課程內容進階的關於學校網站排課系統</span></p>
<p><span><em><strong>5.</strong></em>安裝Claude，AI程式聊天</span></p>
<p><span></span></p>
<h2>程式執行</h2>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p><h1>w13</h1>
<p>1.從教務處主機直接擷取資料</p>
<p></p>
<p>這個 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 猜數字遊戲
from browser import document, html, alert
import random
# 跳出文字說明視窗
alert("開始玩猜數字遊戲")
# 利用 random 模組中的 randint 取 1~100 間的亂數
標準答案 = random.randint(1, 100)
# 利用 input 函式視窗, 取使用者所猜的數字, 轉為整數
你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
# 猜測次數起始值設為 1
猜測次數 = 1
# 進入重複迴圈, 直到猜對數字
while 標準答案 != 你猜的數字:
    # 根據使用者所猜的數字, 與答案比較後, 給出提示
    if 標準答案 &lt; 你猜的數字:
        alert("猜第" + str(猜測次數) + "次, 太大了，再猜 :)加油")
    else:
        alert("猜第" + str(猜測次數) + "次, 太小了，再猜 :)加油")
    你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
    # 猜測次數累加
    猜測次數 += 1
# 跳出迴圈表示猜對, 給出最後文字說明視窗
alert("猜對了！答案為" + str(標準答案) + ", 總共猜了" + str(猜測次數) + "次")</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p><h2>擷取各學期班級課表</h2>
<p><span>利用以下字串至可攜程式內以<span style="background-color: #ffff00;">python</span>執行</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS

import requests
import bs4

'''
機械設計系各班 classid:
42310: 42310四設計一訓

42311: 42311四設計一甲
42312: 42312四設計一乙

42319: 42319四設計系一攜
42320: 42320四設計二訓

42321: 42321四設計二甲
42322: 42322四設計二乙

42329: 42329四設計系二攜
42330: 42330四設計三訓

42331: 42331四設計三甲
42332: 42332四設計三乙

42339: 42339四設計系三攜
42340: 42340四設計四訓

42341: 42341四設計四甲
42342: 42342四設計四乙

42349: 42349四設計系四攜

第 112 學年第 2 學期, 查詢設一甲的班級課表

https://localhost:9447/?semester=1122&amp;classid=設一甲
'''
# 將班級中文縮寫與代號存入 mde dict

mde ={
"設一訓": "42310",
"設一甲": "42311",
"設一乙": "42312",
"設一攜": "42319",
"設二訓": "42320",
"設二甲": "42321",
"設二乙": "42322",
"設二攜": "42329",
"設三訓": "42330",
"設三甲": "42331",
"設三乙": "42332",
"設三攜": "42339",
"設四訓": "42340",
"設四甲": "42341",
"設四乙": "42342",
"設四攜": "42349"
}

app = Flask(__name__)
CORS(app)

@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    classid = request.args.get('classid')
    column = request.args.get('column')

    if semester == None:
        semester = '1121'
    if classid == None:
        #設一甲
        classid = '設一甲'
    # 透過 mde dict 將班級中文縮寫轉為代號
    try:
        selclss = mde[classid]
    except:
        return "查無資料"

    headers = {'X-Requested-With': 'XMLHttpRequest'}

    url = 'https://qry.nfu.edu.tw/jclass_ajax.php'
    #post_var = {'pselyr': semester, 'pselclss': classid}
    post_var = {'pselyr': semester, 'pselclss': selclss}

    result = requests.post(url, data = post_var, headers = headers)
    #soup = bs4.BeautifulSoup(result.content, 'lxml')
    soup = bs4.BeautifulSoup(result.content, 'lxml', from_encoding='utf-8')
    # 列出 soup 物件的字元
    #print(str(soup))
    table = soup.find('table', {'class': 'tbcls'})
    # 添加border屬性
    table['border'] = "1"
    # 返回帶有border屬性的table HTML
    table_html = table.prettify()
    return table_html
    #return  str(pselyr) + " + " +str(pseqno)

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=9447, debug=True, ssl_context="adhoc")</pre>
<p><img alt="" height="443" src="/images/螢幕擷取畫面 (63).png" width="574"/></p>
<p></p>
<p></p><h1>file</h1>
<p>此課程所用到的所有檔案統整都在這裡。</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/ETIaH2KB2dxKjbJpkxS6kO4B4eo0QaeH3iW0rxUfqBMMng?e=cINExf">portable_2024.7z</a> 可攜程式環境檔</p>
<p><a href="/downloads/main2.txt">main2.txt</a>，<a href="/downloads/static.txt">static.txt</a> replit靜態執行所檔案程式</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EUlPn3lAo5ZPn9syR_xAbHsBhiSa_EULJtAInuSbwl4HhQ?e=cPGvTr">miktex-portable.7z</a> <span>期中與期末會用到的</span><span style="background-color: #ffff00;"><strong>LaTeX</strong></span></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41223118_nfu_edu_tw/EdhJ6v0ihThGu3Mwl2doZssBdb258_r7Bv_-ie0CCYEu8g?e=dSKZyk">Wink.exe</a> 影片拍攝安裝檔</p>
<p><span style="background-color: #ffffff; color: #003300;"><strong>-------------------------------------------------------------------------------------</strong></span></p>
<p><span style="background-color: #ffff00;"><b>分組網站需統整的資料</b></span></p>
<p><a href="https://github.com/git-guides">https://github.com/git-guides</a><span></span></p>
<p><a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a></p>
<p><a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/41223118_nfu_edu_tw/EVwYFasax3lKjPdSV-s74eoBhxLEUSshrejySu9naK79FQ?e=FNt5SB">A Tutorial for GitHub.pdf</a></p>
<p><a href="https://docs.github.com/en/get-started/start-your-journey/git-and-github-learning-resources">github學習資源</a></p>
<p></p>
<p>課程教學影片<a href="https://www.youtube.com/@-kmolab9376">TY</a></p>
<p></p>
<p><span style="background-color: #ffff00;"><strong></strong></span></p>
<p><span style="background-color: #ffff00;"><strong></strong></span></p>
<h1>memo</h1>
<p>課程teams code：<strong><span style="background-color: #ffff00;">ry8vdyo</span></strong></p>
<p><strong><span style="background-color: #ffff00;"></span></strong></p>
<p>課程評分:</p>
<p>每週<span style="background-color: #ffff00;">上課內容與摘要整理，<span>相關資料收集</span>與閱讀心得。</span></p>
<p>學員每週編寫網誌內容 <em><strong>40%</strong></em></p>
<p>每組<span style="background-color: #ffff00;">6人<span style="background-color: #ffffff;">，</span></span><span style="color: #ff0000;"><strong>期中</strong></span>報告題目: <strong><span style="background-color: #ffff00;">Brython 程式應用！！！！</span></strong><em><strong><span style="background-color: #ffff00;"><span style="background-color: #ffffff;"> </span></span></strong><strong><span style="background-color: #ffff00;"><span style="background-color: #ffffff;">30%</span></span></strong></em></p>
<p><strong><span style="color: #ff0000;">期末</span></strong>報告題目<span style="background-color: #ffff00;"><strong>自選</strong><span style="background-color: #ffffff;"> </span><em><strong><span style="background-color: #ffffff; color: #000000;">30%</span></strong></em></span></p>
<p>。</p>
<p>。</p>
<p>。</p>
<p>。</p>
<p>想完成目標：</p>
<p>留言系統內容，怎麼新增進網站裡。</p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>