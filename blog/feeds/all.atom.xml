<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-14T07:23:56+08:00</updated><entry><title>2024 w6 課程整理</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-14T07:23:56+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關說明 git,GPT，git基礎使用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關說明 git,GPT，git基礎使用&lt;/p&gt;


&lt;h1&gt;自己對git的使用&lt;/h1&gt;
&lt;p&gt;就自己與git的理解，能想到的直覺git就是一個系統的控制代碼庫，內容包含的有創建 上傳 修改 檢視 拉取，能與多位參與者一起設計一個產品，並設有git的分支可以使各位設計者們在不同的分支裡設計 儲存，最後提交合併統整成一個完整的成品。&lt;/p&gt;
&lt;p&gt;簡單點就是比方說一個產品有分上下半，我正在做上半部另一個人正在做下半部，最後合併，也可以兩人同時整理上下兩部分，就是最後合併時會有因為彼此設計內容不同而有的衝突問題，需要解決的合併問題。&lt;/p&gt;
&lt;p&gt;以上自己所理解關於git的使用。&lt;/p&gt;
&lt;p&gt;而經由與chatGTP的尋問和思索得出：&lt;/p&gt;
&lt;p&gt;Git是一個分散式版本控制系統，旨在快速且有效率地處理從小到大的專案，&lt;/p&gt;
&lt;p&gt;幫助團隊協同開發軟體，追蹤程式的變更，並管理不同版本的程式歷程。&lt;/p&gt;
&lt;p&gt;基本的使用程式有：&lt;/p&gt;
&lt;p&gt;git init (建立一個新的Git儲存庫)/mkdir&lt;/p&gt;
&lt;p&gt;git add . (將檔案加入至暫存區)&lt;/p&gt;
&lt;p&gt;git commit -m "內容" (提交修改)&lt;/p&gt;
&lt;p&gt;git push (推送修改內容至遠端儲存庫)/git pull(拉取現在遠端資料庫的最新資料)&lt;/p&gt;
&lt;p&gt;git status (查看存儲庫狀態)&lt;/p&gt;
&lt;p&gt;git log (查看提交歷史)&lt;/p&gt;
&lt;p&gt;git clone (克隆現在存儲庫)&lt;/p&gt;
&lt;h1&gt;與ChatGPT的對話&lt;/h1&gt;
&lt;p&gt;Git是由Linus Torvalds於 2005 年開始開發的，當時創作者因個人興趣而創作了Linux作業系統，但當該系統的版本控制BitKeeper被停止免費使用時，創作者開始為 Linux的核心創建自己的版本控制系統。&lt;/p&gt;
&lt;p&gt;於2005年4月以1.0版本的形式公開發布，最初的版本是基於快照的版本控制系統，本意是提供高速性能和完整的歷史記錄。&lt;/p&gt;
&lt;p&gt;隨著時間的推移，Git開始在社會得到了廣泛的應用許多，多個軟體製作都開始採用Git作為主要的版本控制系統。&lt;/p&gt;
&lt;p&gt;於2008年GitHub平台的建立，GitHub 提供了強大的協作功能和社交化的開發環境，吸引了許多創作者和專案組的使用，使Git知名度進一步的提升。&lt;/p&gt;
&lt;p&gt;Git一直在不斷發展和改進，每個版本的更新都包括性能優化、新功能和錯誤修復，使 Git 變得更加穩健和強大。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;總的來說，Git 的發展歷史可以追溯到其開發者Linus Torvalds對當時版本控制系統的不滿。&lt;/p&gt;
&lt;p&gt;而關於創作者，他最初是為了個人興趣而開發Linux，並將其發布為開源軟體，這是一個極其簡單的作業系統核心，隨著時間的推移，Linux開源項目發展迅速，逐漸成為一個強大的作業系統，廣泛用於服務器、嵌入式設備和超級計算機等領域。&lt;/p&gt;
&lt;p&gt;Linux的成功之後，創作者開始致力於其他開源項目，包括 Git分散式版本控制系統，而Git 最初是為了管理 Linux內核開發過程中的版本控制而創建的。&lt;/p&gt;
&lt;p&gt;在見證了BitKeeper版本控制系統被禁止免費使用後，促使他開發了一個新的版本控制系統，也就是 Git。&lt;/p&gt;
&lt;p&gt;簡單來說Linus Torvalds是開源社會(Open-source-software movement)的重要領頭人之一。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Git提供了強大的版本控制和內容管理功能，有助於解決許多與程式、文件和項目管理相關的問題。&lt;/p&gt;
&lt;p&gt;1.Git可以追蹤文件的歷史變更，並允許用戶輕鬆地回溯到先前的版本，對於開發者來說他們可以隨時查看、比較和恢復文件的不同版本，從而更好地管理。&lt;/p&gt;
&lt;p&gt;2.Git允許用戶創建分支，這是代碼庫中獨立的開發線。這使得開發人員可以同時進行多個功能的開發，而不會影響主要代碼庫的穩定性。分支還可以用於實現不同的功能和版本之間的隔離，以及進行測試和修復錯誤。&lt;/p&gt;
&lt;p&gt;3.Git是一個分散式版本控制系統，允許多個開發人員同時在同一個程式庫上工作，開發人員可以通過提交和合併程式來協同製作。&lt;/p&gt;
&lt;p&gt;4.Git支持遠端存儲庫，可以將程式庫備份到遠端伺服器(如：GitHub)，可以跨不同位置和團隊共享和訪問程式，並提高程式的可用性和可靠性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git可以與持續集成和持續部署（CI/CD）工具集成，使得開發團隊可以自動化測試、構建和部署應用程序，從而加快開發週期並提高代碼品質。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;git application&lt;/h1&gt;
&lt;p&gt;在chatGTP理解裡demo git client指的是用於演示或展示 Git功能和操作的 Git客戶端，供簡單易用的用戶界面，可以快速了解 Git 的基本操作和流程，demo git client會模擬 git的常見功能，通常是教學或演示目的而設計的，以幫助用戶更好地理解和應用 git 版本控制系統。&lt;/p&gt;
&lt;p&gt;詢問chatGTP得到這些結論後，自己個人理解為就是對git的基礎灌輸，讓你理解git的運作 原理 如何用及應用，對此我觀看了：git基礎影片，觀看這個網站。&lt;/p&gt;
&lt;h1&gt;使用demo git client與git server&lt;/h1&gt;
&lt;p&gt;在Windows上使用git server。(我首先參考了這個網站內容大致理解了如何架設)&lt;/p&gt;
&lt;p&gt;詢問了chatGTP，大致與事前觀看的網站資訊差不多，但GTP特別說明，一定要安裝下載最新版本的Git for Windows 。&lt;/p&gt;
&lt;p&gt;簡單理解就是需先準備好一個適合的環境，然後使用git創建一個資料庫(git init) 設置SSH訪問認證服務，之後只要在新建好的資料夾執行&lt;/p&gt;
&lt;p&gt;cd ~&lt;/p&gt;
&lt;p&gt;mkdir git&lt;/p&gt;
&lt;p&gt;cd git&lt;/p&gt;
&lt;p&gt;mkdir my-git-server&lt;/p&gt;
&lt;p&gt;cd my-git-server&lt;/p&gt;
&lt;p&gt;git init --bare&lt;/p&gt;
&lt;p&gt;init to push
首先要先啟動好個人的可攜式近端程式：&lt;/p&gt;
&lt;p&gt;1.在Y:\tmp分別建立gitproject\repository和gitserver\repository共四個目錄。(mkdir)&lt;/p&gt;
&lt;p&gt;2.在gitproject\repository和gitserver\repository裡分別再新增名稱為repo1的目錄。&lt;/p&gt;
&lt;p&gt;3.繼2.在Y:\tmp\gitproject\repo1裡新增新檔案README.md，&lt;/p&gt;
&lt;p&gt;內容有：&lt;/p&gt;
&lt;p&gt;echo "Hello, World!" &amp;gt; README.md&lt;/p&gt;
&lt;p&gt;git add README.md&lt;/p&gt;
&lt;p&gt;git commit -m "Initial commit"&lt;/p&gt;
&lt;p&gt;git remote add origin y:\tmp\gitserver\repository\repo1&lt;/p&gt;
&lt;p&gt;git push -u origin main&lt;/p&gt;
&lt;p&gt;4.在Y:\tmp\gitproject&amp;gt;git config --global init.defaultBranch main，&lt;/p&gt;
&lt;p&gt;設定git init採用main作為內定主分支，&lt;/p&gt;
&lt;p&gt;之後使用git init，創建.git。&lt;/p&gt;
&lt;p&gt;5.完成以上步驟後，將Y:\tmp\gitproject\repo1中的倉儲內容送到Y:\tmp\gitserver\repository\repo1目錄中，在C:\tmp\repository&amp;gt;執行 git clone Y:\tmp\gitserver\repository\repo1。&lt;/p&gt;
&lt;p&gt;(因為沒有特別說明倉儲clone後的目錄名稱，因此git會將Y:\tmp\gitserver\repository\repo1內容複製一份放入 C:\tmp\repository\repo1目錄裡)&lt;/p&gt;
&lt;p&gt;6.Y:\tmp\gitserver\repository\repo1裡的資料現在已分別存入Y:\tmp\gitproject\repo1與 C:\tmp\repository\repo1裡，可以分別在這兩個倉儲中進行改版 提交，再設法將改版內容push到 Y:\tmp\gitserver\repository\repo1中。&lt;/p&gt;
&lt;p&gt;(想讓使用者跨網路存取Windows操作系統上的倉儲，請參考這裡)&lt;/p&gt;</content><category term="2024 w6 課程整理"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w5 課程整理</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-03-21T10:00:00+08:00</published><updated>2024-06-14T07:13:13+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-21:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關  Replit key建立&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關  Replit key建立&lt;/p&gt;


&lt;h1&gt;Replit key建立&lt;/h1&gt;
&lt;p&gt;講解Replit分組平台倉儲設定。(詳細觀看此TY)&lt;/p&gt;
&lt;p&gt;主要內容有用.ssh-keygen創建自己的config和id_rsa，刪除重新綁定在replit的倉儲帳號以利重新獲得自己的權限。&lt;/p&gt;
&lt;p&gt;使用自己下載的可攜程式檔裡的Putty-solvespace.exe(STL)，零件檢視方法。(詳細影片)&lt;/p&gt;</content><category term="2024 w5 課程整理"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w4 課程整理</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-03-14T10:00:00+08:00</published><updated>2024-06-14T07:06:42+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-14:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關 gitpod, Replit, 不同網頁編輯, LaTeX, 整理資料&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關 gitpod, Replit, 不同網頁編輯, LaTeX, 整理資料&lt;/p&gt;


&lt;h1&gt;使用gitpod來維護倉儲&lt;/h1&gt;
&lt;p&gt;https://8000-zhe41223118-wcm2024-g09005qk317.ws-us110.gitpod.io/content/index.html&lt;/p&gt;
&lt;p&gt;使用gitpod來維護倉儲，並獲得權限(.ssh-keygen)。&lt;/p&gt;
&lt;p&gt;備註：因為gitpod它只有每個月50小時的限量，所以使用完需回到gitpod網頁將執行中的倉儲stop，&lt;/p&gt;
&lt;p&gt;在使用gitpod上傳時會需要先授權與github的合併存取權，否則會無法上傳。&lt;/p&gt;
&lt;h1&gt;Replit靜態網站檢視&lt;/h1&gt;
&lt;p&gt;需下載main2.txt和static.txt取得裡面的main2.py和static.py，將兩個檔案加入至replit編輯(Files)，之後在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視，要取消執行只要在Shell頁面按下Ctrl+C就可以了。&lt;/p&gt;
&lt;h1&gt;Replit分組網站建立權限&lt;/h1&gt;
&lt;p&gt;由於Replit只允許一個倉儲帳號對應，所以分組網站的每個人都需要自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config&lt;/p&gt;
&lt;p&gt;備註：建議還是使用Gitpod來進行.ssh-keygen，因為replit時常改版 也會以授權等方式來拖延時時間來刪除你的.ssh。&lt;/p&gt;
&lt;h1&gt;replit Codespaces Gitpod&lt;/h1&gt;
&lt;p&gt;三種網頁編輯執行動態和靜態網站和維護，編輯個人網站的方式不只一種，除了上述三種，能編輯個人網站內容，如：近端維護也是一種，所以當其中一個不能使用時，我們還有另外幾種的維護方式，這變向說明了，在每個人選擇的道路可以有很多種。&lt;/p&gt;
&lt;h1&gt;LaTeX&lt;/h1&gt;
&lt;p&gt;期中與期末時需要利用其建立各組的報告，所以需先下載miktex-portable.7z&lt;/p&gt;
&lt;h1&gt;利用分組倉儲整理資料&lt;/h1&gt;
&lt;p&gt;https://github.com/git-guides&lt;/p&gt;
&lt;p&gt;https://git-scm.com/book/zh-tw/v2&lt;/p&gt;
&lt;p&gt;https://git-scm.com/book/zh/v2&lt;/p&gt;
&lt;p&gt;A Tutorial for GitHub.pdf&lt;/p&gt;
&lt;p&gt;github學習資源 &lt;/p&gt;
&lt;p&gt;https://docs.github.com/en/get-started/start-your-journey/git-and-github-learning-resources&lt;/p&gt;
&lt;p&gt;以上等資料統整至分組倉儲網站。&lt;/p&gt;</content><category term="2024 w4 課程整理"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w3 課程整理</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-03-07T10:00:00+08:00</published><updated>2024-06-14T06:42:26+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-07:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關 wink, git指令, 子模組&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關 wink, git指令, 子模組&lt;/p&gt;


&lt;h1&gt;wink建立&lt;/h1&gt;
&lt;p&gt;可以至官方網站下載需要的版本。&lt;/p&gt;
&lt;p&gt;或直接下載這個安裝檔。&lt;/p&gt;
&lt;h1&gt;git常用指令&lt;/h1&gt;
&lt;p&gt;git add . (新增)&lt;/p&gt;
&lt;p&gt;git commit -m "內容"  (提交及名稱)&lt;/p&gt;
&lt;p&gt;git push (推送)&lt;/p&gt;
&lt;p&gt;git version (查詢目前所使用的 git 版本)&lt;/p&gt;
&lt;p&gt;git status (一般是用來檢查目前近端改版情況)&lt;/p&gt;
&lt;p&gt;若在遠端倉儲已經改版了，就必須先git pull，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。&lt;/p&gt;
&lt;p&gt;git pull=git fetch + git merge&lt;/p&gt;
&lt;p&gt;git fetch (將遠端主機的最新內容拉到本地)，git merge (用於從指定的commit合併到當前分支)&lt;/p&gt;
&lt;p&gt;git submodule add 自己倉儲網址.git+學號 (新增分組倉儲的子模組)&lt;/p&gt;
&lt;p&gt;如果只要取下倉儲主要內容，可以使用git clone (取一個git倉儲)克隆一份git倉儲，可能該子模組還有其他子模組，就必須加上--recurse-submodules&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules (.git 指定目錄與否)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下為自己收錄使用指令(可能有非git指令)&lt;/p&gt;
&lt;p&gt;git submodule update --init (抓下子模組)&lt;/p&gt;
&lt;p&gt;git log (檢視 Git 紀錄 Q鍵離開)&lt;/p&gt;
&lt;p&gt;ls -l (瀏覽)&lt;/p&gt;
&lt;p&gt;pwd (列出現在工作目錄)&lt;/p&gt;
&lt;p&gt;acp ("輸入" 直接上傳)&lt;/p&gt;
&lt;p&gt;dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫)&lt;/p&gt;
&lt;p&gt;dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄)&lt;/p&gt;
&lt;h1&gt;在分組網站建立子模組&lt;/h1&gt;
&lt;p&gt;主要還是參照導師的這個影片和網頁來完成的。&lt;/p&gt;
&lt;p&gt;整理了導師在影片中應用到的指令：&lt;/p&gt;
&lt;p&gt;git status&lt;/p&gt;
&lt;p&gt;ls -l&lt;/p&gt;
&lt;p&gt;clear&lt;/p&gt;
&lt;p&gt;git submodule add 自己倉儲網址.git空格+學號&lt;/p&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;p&gt;git commit -m "add 學號 submodule"&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;p&gt;以上指令。&lt;/p&gt;
&lt;p&gt;操作部分是在github的Codespaces上執行，目的是在分組倉儲建立個人子模組。&lt;/p&gt;</content><category term="2024 w3 課程整理"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 w2 課程整理</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-02-29T10:00:00+08:00</published><updated>2024-06-14T06:40:32+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-29:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關 Disqus, ckmsc39th, Codespaces&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關 Disqus, ckmsc39th, Codespaces&lt;/p&gt;


&lt;h1&gt;Disqus&lt;/h1&gt;
&lt;p&gt;以導師網站裡這個頁面給的範例 
https://mde.tw/wcm2024/content/Disqus.html&lt;/p&gt;
&lt;p&gt;想試試以這個參考影片為基底，製作出一個屬於自網站的Q&amp;amp;A留言系統
https://help.disqus.com/en/articles/1717112-universal-embed-code&lt;/p&gt;
&lt;p&gt;最終希望能完成向導師這個頁面一樣的系統 https://mde.tw/wcm2024/content/Q&amp;amp;A.html&lt;/p&gt;
&lt;h1&gt;ckmsc39th&lt;/h1&gt;
&lt;p&gt;在看了這個倉儲的貢獻者名單，除了可以看到各用戶的提交次數與每次提交內容外。
https://github.com/ckmsc39th/ckmsc39th.github.io/graphs/contributors&lt;/p&gt;
&lt;p&gt;個人在觀看分析後覺得，可以從這個網站頁面還能得知：&lt;/p&gt;
&lt;p&gt;(!)各成員提交的時間點及提交統計圖。&lt;/p&gt;
&lt;p&gt;(2)各成員在當月當日，每天上傳修改資料曲線圖。&lt;/p&gt;
&lt;p&gt;(3)得知從2/12到6/13這段期間是各成員有push的時間段。&lt;/p&gt;
&lt;p&gt;(4)同(3)也得知每位成員在各時間段上傳次數多寡。&lt;/p&gt;
&lt;p&gt;(5)也能統計全員的上傳次數並統計排名。&lt;/p&gt;
&lt;h1&gt;Codespaces&lt;/h1&gt;
&lt;p&gt;在繼使用replit 近端 遠端，編輯維護網站後，為新的維護能維護網站的方法。&lt;/p&gt;
&lt;p&gt;優缺點總結幾點：&lt;/p&gt;
&lt;p&gt;1.可以跳過近端反鎖部驟，直接開啟動態網站編輯。&lt;/p&gt;
&lt;p&gt;2.幾乎與replit的操作系統一樣。(和其最近更新的動態網站連結亂碼)&lt;/p&gt;
&lt;p&gt;3.受限於這個只是給你試用的，所以有每個月的使用時數上限。&lt;/p&gt;
&lt;p&gt;以下連結為使用Codespaces編輯維護晚站後的靜態連結：
https://zhe41223118.github.io/wcm2024/&lt;/p&gt;</content><category term="2024 w2 課程整理"></category><category term="網誌編寫"></category><category term="pelican"></category></entry><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-14T07:08:02+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統2&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;</content><category term="w1"></category><category term="網誌編寫"></category><category term="pelican"></category></entry></feed>