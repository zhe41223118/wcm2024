<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統 - 2024 w6 課程整理</title><link href="./" rel="alternate"></link><link href="./feeds/2024-w6-ke-cheng-zheng-li.atom.xml" rel="self"></link><id>./</id><updated>2024-06-17T16:37:01+08:00</updated><entry><title>2024 w6 課程整理</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T10:00:00+08:00</published><updated>2024-06-17T16:37:01+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關說明 git, GPT，git基礎使用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關說明 git, GPT，git基礎使用&lt;/p&gt;


&lt;h1&gt;自己對git的使用&lt;/h1&gt;
&lt;p&gt;就自己與git的理解，能想到的直覺git就是一個系統的控制代碼庫，內容包含的有創建 上傳 修改 檢視 拉取，能與多位參與者一起設計一個產品，並設有git的分支可以使各位設計者們在不同的分支裡設計 儲存，最後提交合併統整成一個完整的成品。&lt;/p&gt;
&lt;p&gt;簡單點就是比方說一個產品有分上下半，我正在做上半部另一個人正在做下半部，最後合併，也可以兩人同時整理上下兩部分，就是最後合併時會有因為彼此設計內容不同而有的衝突問題，需要解決的合併問題。&lt;/p&gt;
&lt;p&gt;以上自己所理解關於git的使用。&lt;/p&gt;
&lt;p&gt;而經由與chatGTP的尋問和思索得出：&lt;/p&gt;
&lt;p&gt;Git是一個分散式版本控制系統，旨在快速且有效率地處理從小到大的專案，幫助團隊協同開發軟體，追蹤程式的變更，並管理不同版本的程式歷程。&lt;/p&gt;
&lt;p&gt;基本的使用程式有：&lt;/p&gt;
&lt;p&gt;git init (建立一個新的Git儲存庫)/mkdir&lt;/p&gt;
&lt;p&gt;git add . (將檔案加入至暫存區)&lt;/p&gt;
&lt;p&gt;git commit -m "內容" (提交修改)&lt;/p&gt;
&lt;p&gt;git push (推送修改內容至遠端儲存庫)/git pull(拉取現在遠端資料庫的最新資料)&lt;/p&gt;
&lt;p&gt;git status (查看存儲庫狀態)&lt;/p&gt;
&lt;p&gt;git log (查看提交歷史)&lt;/p&gt;
&lt;p&gt;git clone (克隆現在存儲庫)&lt;/p&gt;
&lt;h1&gt;與ChatGPT的對話&lt;/h1&gt;
&lt;p&gt;Git是由 &lt;a href="https://zh.wikipedia.org/zh-tw/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9"&gt;Linus Torvalds&lt;/a&gt; 於 2005 年開始開發的，當時創作者因個人興趣而創作了 &lt;a href="https://zh.wikipedia.org/zh-tw/Linux"&gt;Linux作業系統&lt;/a&gt;，但當該系統的版本控制 &lt;a href="https://zh.wikipedia.org/zh-tw/BitKeeper"&gt;BitKeeper&lt;/a&gt; 被停止免費使用時，創作者開始為 Linux的核心創建自己的版本控制系統。&lt;/p&gt;
&lt;p&gt;於2005年4月以1.0版本的形式公開發布，最初的版本是基於快照的版本控制系統，本意是提供高速性能和完整的歷史記錄。&lt;/p&gt;
&lt;p&gt;隨著時間的推移，Git開始在社會得到了廣泛的應用許多，多個軟體製作都開始採用Git作為主要的版本控制系統。&lt;/p&gt;
&lt;p&gt;於2008年GitHub平台的建立，GitHub 提供了強大的協作功能和社交化的開發環境，吸引了許多創作者和專案組的使用，使Git知名度進一步的提升。&lt;/p&gt;
&lt;p&gt;Git一直在不斷發展和改進，每個版本的更新都包括性能優化、新功能和錯誤修復，使 Git 變得更加穩健和強大。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;總的來說，Git 的發展歷史可以追溯到其開發者Linus Torvalds對當時版本控制系統的不滿。&lt;/p&gt;
&lt;p&gt;而關於創作者，他最初是為了個人興趣而開發Linux，並將其發布為開源軟體，這是一個極其簡單的作業系統核心，隨著時間的推移，Linux開源項目發展迅速，逐漸成為一個強大的作業系統，廣泛用於服務器、嵌入式設備和超級計算機等領域。&lt;/p&gt;
&lt;p&gt;Linux的成功之後，創作者開始致力於其他開源項目，包括 Git分散式版本控制系統，而Git 最初是為了管理 Linux內核開發過程中的版本控制而創建的。&lt;/p&gt;
&lt;p&gt;在見證了BitKeeper版本控制系統被禁止免費使用後，促使他開發了一個新的版本控制系統，也就是 Git。&lt;/p&gt;
&lt;p&gt;簡單來說Linus Torvalds是開源社會(&lt;a href="https://en.wikipedia.org/wiki/Open-source-software_movement"&gt;Open-source-software movement&lt;/a&gt;)的重要領頭人之一。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Git提供了強大的版本控制和內容管理功能，有助於解決許多與程式、文件和項目管理相關的問題。&lt;/p&gt;
&lt;p&gt;1.Git可以追蹤文件的歷史變更，並允許用戶輕鬆地回溯到先前的版本，對於開發者來說他們可以隨時查看、比較和恢復文件的不同版本，從而更好地管理。&lt;/p&gt;
&lt;p&gt;2.Git允許用戶創建分支，這是代碼庫中獨立的開發線。這使得開發人員可以同時進行多個功能的開發，而不會影響主要代碼庫的穩定性。分支還可以用於實現不同的功能和版本之間的隔離，以及進行測試和修復錯誤。&lt;/p&gt;
&lt;p&gt;3.Git是一個分散式版本控制系統，允許多個開發人員同時在同一個程式庫上工作，開發人員可以通過提交和合併程式來協同製作。&lt;/p&gt;
&lt;p&gt;4.Git支持遠端存儲庫，可以將程式庫備份到遠端伺服器(如：GitHub)，可以跨不同位置和團隊共享和訪問程式，並提高程式的可用性和可靠性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git可以與持續集成和持續部署（&lt;a href="https://www.wingwill.com.tw/zh-tw/%E9%83%A8%E8%90%BD%E6%A0%BC/%E9%9B%B2%E5%9C%B0%E6%B7%B7%E5%90%88%E6%87%89%E7%94%A8/cicd%E5%B7%A5%E5%85%B7/"&gt;CI/CD&lt;/a&gt;）工具集成，使得開發團隊可以自動化測試、構建和部署應用程序，從而加快開發週期並提高代碼品質。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;git application&lt;/h1&gt;
&lt;p&gt;在chatGTP理解裡demo git client指的是用於演示或展示 Git功能和操作的 Git客戶端，供簡單易用的用戶界面，可以快速了解 Git 的基本操作和流程，demo git client會模擬 git的常見功能，通常是教學或演示目的而設計的，以幫助用戶更好地理解和應用 git 版本控制系統。&lt;/p&gt;
&lt;p&gt;詢問chatGTP得到這些結論後，自己個人理解為就是對git的基礎灌輸，讓你理解git的運作 原理 如何用及應用，對此我觀看了：git基礎影片，觀看這個網站。&lt;/p&gt;
&lt;h1&gt;使用demo git client與git server&lt;/h1&gt;
&lt;p&gt;在Windows上使用git server。(我首先參考了&lt;a href="https://ithelp.ithome.com.tw/articles/10250078?sc=rss.iron"&gt;這個網站&lt;/a&gt;內容大致理解了如何架設)&lt;/p&gt;
&lt;p&gt;詢問了chatGTP，大致與事前觀看的網站資訊差不多，但GTP特別說明，一定要安裝下載最新版本的Git for Windows 。&lt;/p&gt;
&lt;p&gt;簡單理解就是需先準備好一個適合的環境，然後使用git創建一個資料庫(git init) 設置SSH訪問認證服務，之後只要在新建好的資料夾執行&lt;/p&gt;
&lt;p&gt;cd ~&lt;/p&gt;
&lt;p&gt;mkdir git&lt;/p&gt;
&lt;p&gt;cd git&lt;/p&gt;
&lt;p&gt;mkdir my-git-server&lt;/p&gt;
&lt;p&gt;cd my-git-server&lt;/p&gt;
&lt;p&gt;git init --bare&lt;/p&gt;
&lt;p&gt;init to push
首先要先啟動好個人的可攜式近端程式：&lt;/p&gt;
&lt;p&gt;1.在Y:\tmp分別建立gitproject\repository和gitserver\repository共四個目錄。(mkdir)&lt;/p&gt;
&lt;p&gt;2.在gitproject\repository和gitserver\repository裡分別再新增名稱為repo1的目錄。&lt;/p&gt;
&lt;p&gt;3.繼2.在Y:\tmp\gitproject\repo1裡新增新檔案README.md，&lt;/p&gt;
&lt;p&gt;內容有：&lt;/p&gt;
&lt;p&gt;echo "Hello, World!" &amp;gt; README.md&lt;/p&gt;
&lt;p&gt;git add README.md&lt;/p&gt;
&lt;p&gt;git commit -m "Initial commit"&lt;/p&gt;
&lt;p&gt;git remote add origin y:\tmp\gitserver\repository\repo1&lt;/p&gt;
&lt;p&gt;git push -u origin main&lt;/p&gt;
&lt;p&gt;4.在Y:\tmp\gitproject&amp;gt;git config --global init.defaultBranch main，&lt;/p&gt;
&lt;p&gt;設定git init採用main作為內定主分支，&lt;/p&gt;
&lt;p&gt;之後使用git init，創建.git。&lt;/p&gt;
&lt;p&gt;5.完成以上步驟後，將Y:\tmp\gitproject\repo1中的倉儲內容送到Y:\tmp\gitserver\repository\repo1目錄中，在C:\tmp\repository&amp;gt;執行 git clone Y:\tmp\gitserver\repository\repo1。&lt;/p&gt;
&lt;p&gt;(因為沒有特別說明倉儲clone後的目錄名稱，因此git會將Y:\tmp\gitserver\repository\repo1內容複製一份放入 C:\tmp\repository\repo1目錄裡)&lt;/p&gt;
&lt;p&gt;6.Y:\tmp\gitserver\repository\repo1裡的資料現在已分別存入Y:\tmp\gitproject\repo1與 C:\tmp\repository\repo1裡，可以分別在這兩個倉儲中進行改版 提交，再設法將改版內容push到 Y:\tmp\gitserver\repository\repo1中。&lt;/p&gt;
&lt;p&gt;(想讓使用者跨網路存取Windows操作系統上的倉儲，請參考這裡)&lt;/p&gt;</content><category term="2024 w6 課程整理"></category><category term="網誌編寫"></category><category term="pelican"></category></entry></feed>