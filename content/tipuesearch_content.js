var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁： https://zhe41223118.github.io/wcm2024/ \n 網誌 ： https://zhe41223118.github.io/wcm2024/blog \n 簡報 ： https://zhe41223118.github.io/wcm2024/reveal \n 倉儲 ： https://github.com/zhe41223118/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "網站目錄功能 \n SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'notebook', 'text': '在replit教學內容裡所整理的重點： \n ps：這裡replit操作流程已經做過了這裡不再贅述過多，會以簡化的方式來述說，想要看到詳細的操作步驟，請到 這個網頁 。 \n 1.使用 這個倉儲 來創建自己的倉儲。 \n \n \n \n', 'tags': '', 'url': 'notebook.html'}, {'title': 'w2', 'text': '在這週上課內容為整理修課導師網站內容題目，和上課新教的新的編輯網站方法。共三項。 \n 1. Disqus \xa0( 未完成 ，會在之後慢慢研究並完成) \n 2. ckmsc39th \n 3. Codespaces \n \n', 'tags': '', 'url': 'w2.html'}, {'title': 'Disqus', 'text': '以導師網站裡這個頁面給的 範例 。 \n 想試試以這個 參考影片 為基底，製作出一個屬於自網站的Q&A留言系統。 \n 最終希望能完成向導師 這個 頁面一樣的系統。 \n \n \n', 'tags': '', 'url': 'Disqus.html'}, {'title': 'ckmsc39th', 'text': '在看了 這個倉儲 的貢獻者名單，除了可以看到 各用戶的提交次數與每次提交內容外。 \n 個人在觀看分析後覺得，可以從 這個 網站頁面還能得知： \n (!)各成員提交的時間點及提交統計圖。 \n (2)各成員在當月當日，每天上傳修改資料曲線圖。 \n (3)得知從2/12到6/13這段期間是各成員有push的時間段。 \n (4)同(3)也得知每位成員在各時間段上傳次數多寡。 \n (5)也能統計全員的上傳次數並統計排名。 \n', 'tags': '', 'url': 'ckmsc39th.html'}, {'title': 'Codespaces', 'text': '在繼使用replit 近端 遠端，編輯維護網站後，為新的維護能維護網站的方法。 \n 優缺點總結幾點： \n 1.可以跳過近端反鎖部驟，直接開啟動態網站編輯。 \n 2.幾乎與replit的操作系統一樣。(和其最近更新的動態網站連結亂碼) \n 3.受限於這個只是給你試用的，所以有 每個月的使用時數上限 。 \n 以下連結為使用 Codespaces 編輯維護晚站後的靜態連結： \n https://zhe41223118.github.io/wcm2024 \n \n \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'w3', 'text': '本週整理重點有三。 \n 1.wink建立操作影片。 \n 2.介紹了git的常用指令。(也新增了一些自己收錄的一些指令) \n 3.利用指令分組網站成員倉儲分組為子模組。 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'Wink', 'text': '可以至官方網站 下載 需要的版本。 \n 或直接下載這個 安裝檔 。 \n', 'tags': '', 'url': 'Wink.html'}, {'title': 'git order', 'text': 'git add .  (新增) \n git commit -m "內容" \xa0 (提交及名稱) \n git  push  (推送) \n git version  (查詢目前所使用的 git 版本) \n git status  (一般是用來檢查目前近端改版情況) \n 若在遠端倉儲已經改版了，就必須先 git pull ，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。 \n git pull=git fetch + git merge \n git\xa0fetch  (將遠端主機的最新內容拉到本地)， git\xa0merge \xa0(用於從指定的commit合併到當前分支) \n git submodule add 自己倉儲網址.git+學號 \xa0(新增分組倉儲的子模組) \n 如果只要取下倉儲主要內容，可以使用 git clone (取一個git倉儲)克隆一份git倉儲，可能該子模組還有其他子模組，就必須加上 --recurse-submodules \n git clone --recurse-submodules  (.git 指定目錄與否) \n ------------------------------------------------------------------------------------------------ \n 以下為自己收錄使用指令(可能有非git指令) \n git submodule update --init (抓下子模組) \n git log (檢視 Git 紀錄 Q鍵離開) \n ls -l (瀏覽) \n pwd (列出現在工作目錄) \n acp ("輸入" 直接上傳) \n dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫) \n dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄) \n \n \n', 'tags': '', 'url': 'git order.html'}, {'title': 'submodule', 'text': '主要還是參照導師的 這個影片 和 網頁 來完成的。 \n 整理了導師在影片中應用到的指令： \n git status \n ls -l \n clear \n git submodule add 自己倉儲網址.git空格+學號 \n git add . \n git commit -m "add 學號 submodule" \n git push \n 以上指令。 \n 操作部分是在github的Codespaces上執行，目的是在分組倉儲建立個人子模組。 \n', 'tags': '', 'url': 'submodule.html'}, {'title': 'w4', 'text': '1. https://8000-zhe41223118-wcm2024-g09005qk317.ws-us110.gitpod.io/content/index.html \n 使用 gitpod 來維護倉儲，並獲得權限( .ssh-keygen )。 \n 備註：恩為gitpod它只有每個月50小時的限量，所以使用完需回到gitpod網頁將執行中的倉儲 stop ， \n 在使用git pod上傳時會需要先授權與github的合併存取權，否則會無法上傳。 \n 2-1.Replit靜態網站檢視，需下載 main2.txt 和 static.txt 取得裡面的 main2.py 和 static.py ，之後在  Shell  執行  python3 main2.py  就可以執行倉儲內的靜態網站檢視，要取消執行只要在Shell頁面按下 Ctrl+C 就可以了。 \n 2-2.Replit分組網站建立權限，由於Replit只允許一個倉儲帳號對應，所以分組網站的 每個人 都需要自行在  /home/runner/.ssh  目錄下建立  id_rsa  與  config \n 備註：建議還是使用Gitpod來進行.ssh-keygen，因為replit時常改版 也會以授權等方式來拖延時時間來刪除你的.ssh。 \n 3.使用replit Codespaces Gitpod三種網頁編輯執行動態和靜態網站和維護。 \n 4.期中與期末時需要利用 LaTeX 建立各組的報告，所以需先下載 miktex-portable.7z \n 5.需要利用分組倉儲整理： \n https://github.com/git-guides \n https://git-scm.com/book/zh-tw/v2 \n https://git-scm.com/book/zh/v2 \n A Tutorial for GitHub.pdf \n github學習資源 \n 以上等資料統整至 分組倉儲網站 。 \n', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': '事前預習了解這週可能會講到內容 iframe 及 相關網站 。 \n --------------------------------------------------------------------------------------- \n 1.講解Replit分組平台倉儲設定。(詳細觀看 此TY ) \n 主要內容有用 .ssh-keygen 創建自己的 config 和 id_rsa ，刪除重新綁定在replit的倉儲帳號以利重新獲得自己的權限。 \n \n 2.使用 可攜檔 裡的 Putty-solvespace.exe ( STL ) ，零件檢視方法。( 詳細影片 ) \n \xa0 \n 3.如何使用可攜程式近端，維護更新自己及分組倉儲。(網站步驟可以看 這個網站 or YT ) \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '課程實作操作： \n 1. 根據自己專業，說明 git 的使用和與 ChatGPT 的對話，將內容整理到個人網誌，內容需含 git發展歷史 ， 創作人的履歷 ，以及一般相同專業人士 如何利用git解決內容管理問題 ？ \n 2.如果想在Windows實際使用 demo git client 與 git server ，該如何進行？ \n \n 了解git在不同專業領域的應用 \n 了解從git init到git push的流程 \n \xa0 \n 測試YT超連結上傳(非正式) \n', 'tags': '', 'url': 'w6.html'}, {'title': 'git introduce', 'text': '就自己與git的理解，能想到的直覺git就是一個系統的控制代碼庫，內容包含的有創建 上傳 修改 檢視 拉取，能與多位參與者一起設計一個產品，並設有git的分支可以使各位設計者們在不同的分支裡設計 儲存，最後提交合併統整成一個完整的成品。 \n 簡單點就是比方說一個產品有分上下半，我正在做上半部另一個人正在做下半部，最後合併，也可以兩人同時整理上下兩部分，就是最後合併時會有因為彼此設計內容不同而有的衝突問題，需要解決的合併問題。 \n 以上自己所理解關於git的使用。 \n 而經由與chatGTP的尋問和思索得出： \n Git是一個分散式版本控制系統，旨在快速且有效率地處理從小到大的專案， \n 幫助團隊協同開發軟體，追蹤程式的變更，並管理不同版本的程式歷程。 \n 基本的使用程式有： \n git  init (建立一個新的Git儲存庫)/mkdir \n git add .  (將檔案加入至暫存區) \n git commit  - m "內容"  (提交修改) \n git push  (推送修改內容至遠端儲存庫)/ git pull (拉取現在遠端資料庫的最新資料) \n git status  (查看存儲庫狀態) \n git  log (查看提交歷史) \n git  clone (克隆現在存儲庫) \n ------------------------------------------------------------------------------------------------- \n Git是由 Linus Torvalds 於 2005 年開始開發的，當時創作者因個人興趣而創作了 Linux作業系統 ，但當該系統的版本控制 BitKeeper 被停止免費使用時，創作者開始為 Linux的核心創建自己的版本控制系統。 \n 於2005年4月以1.0版本的形式公開發布，最初的版本是基於快照的版本控制系統，本意是提供高速性能和完整的歷史記錄。 \n 隨著時間的推移，Git開始在社會得到了廣泛的應用許多，多個軟體製作都開始採用Git作為主要的版本控制系統。 \n 於2008年GitHub平台的建立，GitHub 提供了強大的協作功能和社交化的開發環境，吸引了許多創作者和專案組的使用，使Git知名度進一步的提升。 \n Git一直在不斷發展和改進，每個版本的更新都包括性能優化、新功能和錯誤修復，使 Git 變得更加穩健和強大。 \n --------------------------------------------------------------------------------------------------\xa0 \n 總的來說，Git 的發展歷史可以追溯到其開發者 Linus Torvalds 對當時版本控制系統的不滿。 \n 而關於創作者， 他最初是為了個人興趣而開發Linux，並將其發布為開源軟體，這是一個極其簡單的作業系統核心，隨著時間的推移，Linux開源項目發展迅速，逐漸成為一個強大的作業系統，廣泛用於服務器、嵌入式設備和超級計算機等領域。 \n Linux的成功之後，創作者開始致力於其他開源項目，包括 Git分散式版本控制系統，而Git 最初是為了管理 Linux內核開發過程中的版本控制而創建的。 \n 在見證了BitKeeper版本控制系統被禁止免費使用後，促使他開發了一個新的版本控制系統，也就是 Git。 \n 簡單來說 Linus Torvalds 是開源社會( Open-source-software movement )的重要領頭人之一。 \n -------------------------------------------------------------------------------------------------- \n Git提供了強大的版本控制和內容管理功能，有助於解決許多與程式、文件和項目管理相關的問題。 \n 1.Git可以 追蹤文件的歷史 變更，並允許用戶輕鬆地回溯到先前的版本，對於開發者來說他們可以隨 時查看、比較和恢復文件的不同版本 ，從而更好地管理。 \n 2.Git 允許用戶創建分支 ，這是代碼庫中獨立的開發線。這使得開發人員可以同時進行多個功能的開發，而不會影響主要代碼庫的穩定性。分支還可以用於實現不同的功能和版本之間的隔離，以及進行測試和修復錯誤。 \n 3.Git是一個分散式版本控制系統， 允許多個開發人員同時在同一個程式庫上工作 ，開發人員可以通過提交和合併程式來協同製作。 \n 4.Git 支持遠端存儲庫 ，可以將程式庫備份到遠端伺服器(如：GitHub)，可以跨不同位置和團隊共享和訪問程式，並提高程式的可用性和可靠性。 \n 5. Git可以與持續集成和持續部署（ CI/CD ）工具集成，使得開發團隊可以自動化測試、構建和部署應用程序，從而加快開發週期並提高代碼品質。 \n', 'tags': '', 'url': 'git introduce.html'}, {'title': 'application', 'text': '在 chatGTP理解裡 demo git client指的是 用於演示或展示 Git功能和操作的 Git客戶端 ， 供簡單易用的用戶界面，可以快速了解 Git 的基本操作和流程，demo git client會模擬 git的常見功能，通常是教學或演示目的而設計的，以幫助用戶更好地理解和應用 git 版本控制系統。 \n 詢問 chatGTP得到這些結論後，自己個人理解為就是對git的基礎灌輸，讓你理解git的運作 原理 如何用及應用，對此我觀看了： git基礎影片 ， 觀看這個網站 。 \n -------------------------------------------------------------------------------------------------------------- \n 在 Windows上使用 git server 。(我首先參考了 這個網站 內容大致理解了如何架設) \n 詢問了chatGTP，大致與事前觀看的網站資訊差不多，但GTP特別說明，一定要安裝下載最新版本的Git for Windows 。 \n 簡單理解就是需先準備好一個適合的環境，然後使用git創建一個資料庫(git init) 設置SSH訪問認證服務，之後只要在新建好的資料夾執行 \n cd ~  \n mkdir git \n  cd git  \n mkdir my-git-server  \n cd my-git-server  \n git init --bare \n', 'tags': '', 'url': 'application.html'}, {'title': 'init to push', 'text': '首先要先啟動好個人的可攜式近端程式： \n 1. 在Y :\\tmp分別建立gitproject\\repository和gitserver\\repository共四個目錄。(mkdir) \n 2. 在gitproject\\repository和gitserver\\repository裡分別再新增名稱為repo1的目錄。 \n 3. 繼2.在Y:\\tmp\\gitproject\\repo1裡新增新檔案 README.md ， \n 內容有： \n echo "Hello, World!" > README.md \n git add README.md \n git commit -m "Initial commit" \n git remote add origin y:\\tmp\\gitserver\\repository\\repo1 \n git push -u origin main \n 4. 在Y:\\tmp\\gitproject> git config --global init.defaultBranch main ， \n 設定git init採用main作為內定主分支， \n 之後使用 git init ，創建 .git 。(如圖 ) \n \n 5. 完成以上步驟後，將Y:\\tmp\\gitproject\\repo1中的倉儲內容送到Y:\\tmp\\gitserver\\repository\\repo1目錄中，在C:\\tmp\\repository>執行 git clone Y:\\tmp\\gitserver\\repository\\repo1。 \n (因為沒有特別說明倉儲clone後的目錄名稱，因此git會將Y:\\tmp\\gitserver\\repository\\repo1內容複製一份放入 C:\\tmp\\repository\\repo1目錄裡) \n 6. Y:\\tmp\\gitserver\\repository\\repo1裡的資料現在已分別存入Y:\\tmp\\gitproject\\repo1與 C:\\tmp\\repository\\repo1裡， 可以分別在這兩個倉儲中進行改版 提交 ，再設法將改版內容 push 到 Y:\\tmp\\gitserver\\repository\\repo1中。 \n (想讓使用者 跨網路存取Windows 操作系統上的倉儲，請參考 這裡 ) \n \n', 'tags': '', 'url': 'init to push.html'}, {'title': 'w7-w8', 'text': '', 'tags': '', 'url': 'w7-w8.html'}, {'title': 'w9', 'text': '', 'tags': '', 'url': 'w9.html'}, {'title': 'file', 'text': '此課程所用到的所有檔案統整都在這裡。 \n portable_2024.7z \xa0可攜程式環境檔 \n main2.txt ， static.txt \xa0replit靜態執行所檔案程式 \n miktex-portable.7z \xa0 期中與期末會用到的 LaTeX \n Wink.exe \xa0影片拍攝安裝檔 \n ------------------------------------------------------------------------------------- \n 分組網站需統整的資料 \n https://github.com/git-guides \n https://git-scm.com/book/zh-tw/v2 \n https://git-scm.com/book/zh/v2 \n A Tutorial for GitHub.pdf \n github學習資源 \n \n 課程教學影片 TY \n \n \n', 'tags': '', 'url': 'file.html'}, {'title': 'memo', 'text': '課程teams code： ry8vdyo \n \n 課程評分: \n 每週 上課內容與摘要整理， 相關資料收集 與閱讀心得。 \n 學員每週編寫網誌內容\xa0 40% \n 每組 6人 ， 期中 報告題目:  Brython 程式應用！！！！ \xa0 30% \n 期末 報告題目 自選 \xa0 30% \n 。 \n 。 \n 。 \n 。 \n 想完成目標： \n 留言系統內容，怎麼新增進網站裡。 \n wink操作影片新增。 \n', 'tags': '', 'url': 'memo.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};